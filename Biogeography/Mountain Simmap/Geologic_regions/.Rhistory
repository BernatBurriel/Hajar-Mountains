?dist()
?for
()
?for()
??for
)
install.packages("picante")
library(picante)
?picante
install.packages('car')
library(car)
install.packages('car', dependencies = TRUE)
library(car)
data("Salaries")
head(Salaries)
install.packages('rmarkdown')
install.packages('Rcpp')
knitr::opts_chunk$set(echo = TRUE)
library(car)
install.packages('car')
library(car)
library(dplyr)
install.packages('dplyr')
library(car)
install.packages('rmarkdown')
library(dplyr)
library(raster)
library(sf)
library(tmap)
library(tidyr)
library(extrafont)
library (sp)
library(raster)
library(maptools)
library(plyr)
install.packages('dplyr')
install.packages('sp')
install.packages('rgdal')
install.packages('tidyr')
install.packages('maptools')
library(dplyr)
# 1.1. Load the necessary packages
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
# 1.1. Load the necessary packages
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
# 1.1. Load the necessary packages
install.packages('dplyr')
install.packages("dplyr")
library(raster)
library(sf)
library(tmap)
library(tidyr)
library(extrafont)
library (sp)
library(raster)
library(maptools)
library(plyr)
install.packages('raster')
install.packages('sf')
install.packages("sf")
library(sf)
install.packages('sf')
install.packages("sf")
library(plyr)
library(dplyr)
library(raster)
library(sf)
library(tmap)
library(tidyr)
library(extrafont)
library (sp)
# 1.1. Load the necessary packages
install.packages('dplyr')
install.packages('raster')
install.packages('sf')
library(plyr)
install.packages('plyr')
install.packages('plyr')
library(plyr)
library(dplyr)
# 1.1. Load the necessary packages
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
# 1.1. Load the necessary packages
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
# 1.1. Load the necessary packages
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
install.packages('raster')
memory.limit()
install.packages('radiator')
if (!require("devtools")) install.packages("devtools")
devtools::install_github("thierrygosselin/radiator")
library(radiator)
if (!require("devtools")) install.packages("devtools")
devtools::install_github("thierrygosselin/radiator")
library(radiator)
if (!require("devtools")) install.packages("devtools")
devtools::install_github("thierrygosselin/radiator")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("thierrygosselin/radiator", force = TRUE)
library(radiator)
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
version
library(radiator);library(dplyr);library(gdsfmt);library(SNPRelate);library(vcfR);library(tidyverse);library(SeqArray)
setwd('/Users/imac2011/Dropbox/JULIANA_TFM/Pristurus_RUPESTRIS_ddRAD/02_DDRAD/04_POST_PROCESSING_FILTERING/GALL_RUP/merged_092')
## Read and inspect the STRATA-FILE
strata <- read.table('STRATA_FILE.tsv', sep = "/t", header = TRUE)
install.packages('starmie')
install_github('starmie')
library(devtools)
install_github('starmie')
install_github('sa-lee/starmie')
install_github('pophelper')
install_github('royfrancis/pophelper')
library(pophelper)
.libPaths()
setwd("/Volumes/DROPBOX/Dropbox/BERNAT/PHD/01.HAJAR_MOUNTAINS/COLONIZATION/03.Biogeography/Mountain_colonization_Simmaps/Geologic_regions/")
rm(list = ls())
libs <- c("treeio", "phytools", "geiger", "tidytree", "dplyr", "tidyverse", "doParallel",
"RColorBrewer", "ggtree", "scico", "ape", 'ggplot2')
lapply(libs, require, character.only = TRUE)
#elevation
consensus_genera <- readRDS('lowland_midland_highland/objects/consensus_genera.rds')
genera <- names(consensus_genera)
elev_data <- readRDS('lowland_midland_highland/objects/elev_data.rds')
elev_simmap <- readRDS('lowland_midland_highland/objects/elev_simmap.rds')
# continuous elevation
elev_cont_files <- list.files(path = 'lowland_midland_highland/data/elevation', pattern = '\\.txt$', full.names = T)
elev_cont <- elev_cont300 <- elev_cont1500 <- elev_cont1501 <- vector('list', length(genera))
names(elev_cont) <- names(elev_cont300) <- names(elev_cont1500) <- names(elev_cont1501) <- genera
for (i in 1:length(genera)) {
temp <- read.table(elev_cont_files[i], header = T)
elev_data[[i]]$cont_elev <- temp$elev[match(elev_data[[i]]$Name, temp$Name)]
elev_data[[i]]$lineage <- temp$lineage[match(elev_data[[i]]$Name, temp$Name)]
elev_cont300[[i]] <- elev_data[[i]][elev_data[[i]]$elev == 'low',]
elev_cont1500[[i]] <- elev_data[[i]][elev_data[[i]]$elev == 'mid',]
elev_cont1501[[i]] <- elev_data[[i]][elev_data[[i]]$elev == 'high',]
}
#mountain block
block_data <- readRDS('mountain_blocks/objects/block_data.rds')
block_simmap <- readRDS('mountain_blocks/objects/block_simmap.rds')
### prepare data for plotting trees
## set the colors
elevation_colors <- c( high="#694F5D", low="#41D3BD", mid="#E07A5F")
block_colors <- c(C="#b21020", E="#fec14d", I="#bbbbbb",
M="#bbbbbb", O = "#bbbbbb", W="#1868b5")
plot(1:3, cex = 5 , pch = 16, col = elevation_colors)
plot(1:6, cex = 5 , pch = 16, col = block_colors)
par(mfrow = c(1,2))
plotTree(consensus_genera[[i]]@phylo, fsize = .3, lwd = 1, type = "phylogram",
color = "darkgrey", ftype = "i", offset = .6)
plotTree(consensus_genera[[i]]@phylo, fsize = .000001, lwd = 1, type = "phylogram",
color = "darkgrey", direction = 'leftwards',ftype = "i", offset = 0)
dev.off()
par(mfrow = c(1,2))
plotTree(consensus_genera[[i]]@phylo, fsize = .3, lwd = 1, type = "phylogram",
color = "darkgrey", ftype = "i", offset = .6, mar = c(3, 0, 0.5, 1))
v_breaks <- seq(from = 0, to = max(node.depth.edgelength(consensus_genera[[i]]@phylo)[1]), by = 5)
colors_plot_elev <- elevation_colors[names(elevation_colors) %in% unique(colnames(elev_simmap[[i]]$tips))]
plotTree(consensus_genera[[i]]@phylo, fsize = .000001, lwd = 1, type = "phylogram",
color = "darkgrey", direction = 'leftwards',ftype = "i", offset = 0, mar = c(3, 1, 0.5, 1))
plotTree(consensus_genera[[i]]@phylo, fsize = .3, lwd = 1, type = "phylogram",
color = "darkgrey", ftype = "i", offset = .6, mar = c(3, 0, 0.5, 1))
plotTree(consensus_genera[[i]]@phylo, fsize = .000001, lwd = 1, type = "phylogram",
color = "darkgrey", direction = 'leftwards',ftype = "i", offset = 0, mar = c(3, 0, 0.5, 1))
dev.off()
par(mfrow = c(1,2))
plotTree(consensus_genera[[i]]@phylo, fsize = .3, lwd = 1, type = "phylogram",
color = "darkgrey", ftype = "i", offset = .6, mar = c(3, 1, 0, 1))
tiplabels(pie = elev_simmap[[i]]$tips, piecol = colors_plot_elev, cex = 0.3, lty = par(lty="blank"))
nodelabels(pie = elev_simmap[[i]]$ace, piecol = colors_plot_elev, cex = 0.3, lty = par(lty="blank"))
#  add.simmap.legend(colors=elevation_colors, fsize=0.5, prompt = F, x=1, y=-2)
abline(v = v_breaks[-length(v_breaks)] +(max(node.depth.edgelength(consensus_genera[[i]]@phylo) - max(v_breaks))), lty = 2, lwd = 0.7, col = "lightgrey")
axisPhylo(side = 1, lwd = .8, cex.axis = .8)
colors_plot_block <- block_colors[names(block_colors) %in% unique(colnames(block_simmap[[i]]$tips))]
plotTree(consensus_genera[[i]]@phylo, fsize = .000001, lwd = 1, type = "phylogram",
color = "darkgrey", direction = 'leftwards',ftype = "i", offset = 0, mar = c(3, 0, 1, 1))
tiplabels(pie = block_simmap[[i]]$tips, piecol = colors_plot_block, cex = 0.3, lty = par(lty="blank"))
nodelabels(pie = block_simmap[[i]]$ace, piecol = colors_plot_block, cex = 0.3, lty = par(lty="blank"))
dev.off()
